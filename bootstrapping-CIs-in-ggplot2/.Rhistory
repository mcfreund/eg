ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1E5
)
results
predictions <- matrix(NA, nrow = nrow(X), ncol = 2)
for (ii in seq_len(nrow(D))) {
# predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$bca[, 4:5]
predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$normal[, 2:3]
}
predictions
plot(predictions[, 2] - predictions[, 1])
x <- rnorm(100)
y <- rnorm(100)
D <- cbind(x0 = rep(1, length(x)), x1 = x, y)  ## add intercept
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1E4
)
predictions <- matrix(NA, nrow = nrow(X), ncol = 2)
for (ii in seq_len(nrow(D))) {
# predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$bca[, 4:5]
predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$normal[, 2:3]
}
## now test:
mbm <- microbenchmark(
"cor" = {
sapply(
seq_len(1000),
function(.) {
s <- sample.int(length(grid$x), replace = TRUE)
b1 <- cor(x[s], y[s]) * sd(y[s]) / sd(x[s])
b0 <- mean(y[s]) - b1 * mean(x[s])
b1 * x + b0
}
)
},
"lin.sys" = {
sapply(
seq_len(1000),
function(.) {
samp <- sample.int(length(grid$x), replace = TRUE)
Xsamp <- X[samp, ]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% y[samp])
}
)
},
"boot" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
}
)
mbm
autoplot(mbm)
mbm <- microbenchmark::microbenchmark(
"cor" = {
sapply(
seq_len(1000),
function(.) {
s <- sample.int(length(grid$x), replace = TRUE)
b1 <- cor(x[s], y[s]) * sd(y[s]) / sd(x[s])
b0 <- mean(y[s]) - b1 * mean(x[s])
b1 * x + b0
}
)
},
"lin.sys" = {
sapply(
seq_len(1000),
function(.) {
samp <- sample.int(length(grid$x), replace = TRUE)
Xsamp <- X[samp, ]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% y[samp])
}
)
},
"boot" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
}
)
mbm
autoplot(mbm)
mbm <- microbenchmark::microbenchmark(
"cor" = {
sapply(
seq_len(1000),
function(.) {
s <- sample.int(length(grid$x), replace = TRUE)
b1 <- cor(x[s], y[s]) * sd(y[s]) / sd(x[s])
b0 <- mean(y[s]) - b1 * mean(x[s])
b1 * x + b0
}
)
},
"lin.sys" = {
sapply(
seq_len(1000),
function(.) {
samp <- sample.int(length(grid$x), replace = TRUE)
Xsamp <- X[samp, ]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% y[samp])
}
)
},
"boot" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.index" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- D[samp, 1:2]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
}
)
mbm
autoplot(mbm)
mbm <- microbenchmark::microbenchmark(
"cor" = {
sapply(
seq_len(1000),
function(.) {
s <- sample.int(length(grid$x), replace = TRUE)
b1 <- cor(x[s], y[s]) * sd(y[s]) / sd(x[s])
b0 <- mean(y[s]) - b1 * mean(x[s])
b1 * x + b0
}
)
},
"lin.sys" = {
sapply(
seq_len(1000),
function(.) {
samp <- sample.int(length(grid$x), replace = TRUE)
Xsamp <- X[samp, ]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% y[samp])
}
)
},
"boot" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.index" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- D[samp, 1:2]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.oneline" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
D[, 1:2] %*% solve(t(D[samp, 1:2]) %*% D[samp, 1:2], t(D[samp, 1:2]) %*% D[samp, 3])
},
R = 1000
)
}
)
mbm
autoplot(mbm)
mbm <- microbenchmark::microbenchmark(
"cor" = {
sapply(
seq_len(1000),
function(.) {
s <- sample.int(length(grid$x), replace = TRUE)
b1 <- cor(x[s], y[s]) * sd(y[s]) / sd(x[s])
b0 <- mean(y[s]) - b1 * mean(x[s])
b1 * x + b0
}
)
},
"lin.sys" = {
sapply(
seq_len(1000),
function(.) {
samp <- sample.int(length(grid$x), replace = TRUE)
Xsamp <- X[samp, ]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% y[samp])
}
)
},
"boot" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.index" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- D[samp, 1:2]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.index2" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- X[samp, ]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
}
)
mbm
autoplot(mbm)
mbm <- microbenchmark::microbenchmark(
"cor" = {
lapply(
seq_len(1000),
function(.) {
s <- sample.int(length(grid$x), replace = TRUE)
b1 <- cor(x[s], y[s]) * sd(y[s]) / sd(x[s])
b0 <- mean(y[s]) - b1 * mean(x[s])
b1 * x + b0
}
)
},
"lin.sys" = {
sapply(
seq_len(1000),
function(.) {
samp <- sample.int(length(grid$x), replace = TRUE)
Xsamp <- X[samp, ]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% y[samp])
}
)
},
"boot" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, c("x0", "x1")]
Xsamp <- D[samp, c("x0", "x1")]
ysamp <- D[samp, "y"]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.index" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- D[samp, 1:2]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
},
"boot.index2" = {
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- X[samp, ]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
}
)
mbm
autoplot(mbm)
results <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- X[samp, ]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
results
results$t
5 / 200
apply(results$t, 1, quantile, 5 / 200)
predictions <- matrix(NA, nrow = nrow(X), ncol = 2)
for (ii in seq_len(nrow(D))) {
# predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$bca[, 4:5]
predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$normal[, 2:3]
}
boot::boot.ci
boot::boot.ci(results, conf = 0.95, type = "perc", index = ii)
boot::boot.ci(results, conf = 0.95, type = "perc", index = ii)$perc
predictions <- matrix(NA, nrow = nrow(X), ncol = 2)
for (ii in seq_len(nrow(D))) {
# predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$bca[, 4:5]
predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "perc", index = ii)$perc[, 4:5]
}
predictions[, 1]
apply(results$t, 1, quantile, 5 / 200)
apply(results$t, 2, quantile, 5 / 200)
predictions[, 1]
all.equal(apply(results$t, 2, quantile, 5 / 200), predictions[, 1])
plot(apply(results$t, 2, quantile, 5 / 200), predictions[, 1])
apply(results$t, 2, quantile, 5 / 200)
apply(results$t, 2, quantile, 95 / 200)
predictions
mbm <- microbenchmark(
"quantile" = {
cbind(
apply(results$t, 2, quantile, 5 / 200),
apply(results$t, 2, quantile, 95 / 200)
)
},
"lin.sys" = {
predictions <- matrix(NA, nrow = nrow(X), ncol = 2)
for (ii in seq_len(nrow(D))) {
# predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$bca[, 4:5]
predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "perc", index = ii)$perc[, 4:5]
}
}
)
mbm <- microbenchmark::microbenchmark(
"quantile" = {
cbind(
apply(results$t, 2, quantile, 5 / 200),
apply(results$t, 2, quantile, 95 / 200)
)
},
"lin.sys" = {
predictions <- matrix(NA, nrow = nrow(X), ncol = 2)
for (ii in seq_len(nrow(D))) {
# predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "norm", index = ii)$bca[, 4:5]
predictions[ii, ] <- boot::boot.ci(results, conf = 0.95, type = "perc", index = ii)$perc[, 4:5]
}
}
)
mbm
autoplot(mbm)
type
grid
grid[ii, 2:3]
grid$ymax <- NA
grid$ymin <- NA
grid[ii, 2:3]
ii
boot::boot.ci(results, conf = 0.95, type = "bca", index = ii)$bca[, 4:5]
boot::boot.ci(results, conf = 0.95, type = "bca", index = ii)$bca
.alpha
.alpha <- (100 - percent) / 200  ## 2 tailed
.alpha
.alpha <- (100 - percent) / 200  ## 2 tailed
boot::boot.ci
BootCI <- ggplot2::ggproto(
"BootCI", ggplot2::Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 1000, percent = 95, type) {
grid <- data.frame(x = data$x)
D <- cbind(rep(1, length(x)), x, y)  ## design matrix and response vector
predictions <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- X[samp, ]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
.alpha <- (100 - percent) / 200  ## 2 tailed
if (type == "perc") {
grid$ymin <- apply(predictions$t, 2, quantile, 1 - .alpha)
grid$ymax <- apply(predictions$t, 2, quantile, .alpha)
} else if (type == "bca") {
grid$ymin <- NA
grid$ymax <- NA
for (ii in seq_len(nrow(D))) {
grid[ii, 2:3] <- boot::boot.ci(predictions, conf = percent / 100, type = "bca", index = ii)$bca[, 4:5]
}
}
grid
}
)
BootCI <- ggplot2::ggproto(
"BootCI", ggplot2::Stat,
required_aes = c("x", "y"),
compute_group = function(data, scales, params, n = 1000, percent = 95, type = "perc") {
grid <- data.frame(x = data$x)
D <- cbind(rep(1, length(x)), x, y)  ## design matrix and response vector
predictions <- boot::boot(
D,
statistic = function(D, samp) {
X     <- D[, 1:2]
Xsamp <- X[samp, ]
ysamp <- D[samp, 3]
X %*% solve(t(Xsamp) %*% Xsamp, t(Xsamp) %*% ysamp)
},
R = 1000
)
.alpha <- (100 - percent) / 200  ## 2 tailed
if (type == "perc") {
grid$ymin <- apply(predictions$t, 2, quantile, 1 - .alpha)
grid$ymax <- apply(predictions$t, 2, quantile, .alpha)
} else if (type == "bca") {
grid$ymin <- NA
grid$ymax <- NA
for (ii in seq_len(nrow(D))) {
grid[ii, 2:3] <- boot::boot.ci(predictions, conf = percent / 100, type = "bca", index = ii)$bca[, 4:5]
}
}
grid
}
)
stat_boot_ci <- function(mapping = NULL, data = NULL, geom = "ribbon",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 1000, percent = 95, ...) {
## see: https://cran.r-project.org/web/packages/ggplot2/vignettes/extending-ggplot2.html
ggplot2::layer(
stat = BootCI, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, percent = percent, type = type, na.rm = na.rm, ...)
)
}
p
p +
geom_smooth(method = "lm", se = TRUE, fill = "red", alpha = 0.3)
p +
geom_smooth(method = "lm", se = TRUE, fill = "red", alpha = 0.3) +
stat_boot_ci(alpha = 0.3, n = 1E4, percent = 95)
p +
geom_smooth(method = "lm", se = TRUE, fill = "red", alpha = 0.3) +
stat_boot_ci(alpha = 0.3, n = 1E4, percent = 95, type = "perc")
stat_boot_ci <- function(mapping = NULL, data = NULL, geom = "ribbon",
position = "identity", na.rm = FALSE, show.legend = NA,
inherit.aes = TRUE, n = 1000, percent = 95, type = "perc", ...) {
## see: https://cran.r-project.org/web/packages/ggplot2/vignettes/extending-ggplot2.html
ggplot2::layer(
stat = BootCI, data = data, mapping = mapping, geom = geom,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(n = n, percent = percent, type = type, na.rm = na.rm, ...)
)
}
p +
geom_smooth(method = "lm", se = TRUE, fill = "red", alpha = 0.3) +
stat_boot_ci(alpha = 0.3, n = 1E4, percent = 95, type = "perc")
p +
geom_smooth(method = "lm", se = TRUE, fill = "red", alpha = 0.3) +
stat_boot_ci(alpha = 0.3, n = 1E4, percent = 95, type = "bca")
